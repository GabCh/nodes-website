{"version":3,"sources":["sketches/models/particle.ts","sketches/sketch.ts","components/SideMenu.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["Particle","p","SPEED","NOISE_SCALE","process","x","y","direction","velocity","position","move","angle","noise","TWO_PI","cos","sin","copy","mult","add","checkEdge","isOutsideEdges","random","width","height","display","radius","ellipse","this","createVector","Sketch","PARTICLES_NUMBER","MAX_ITERATIONS","STANDARD_DEVIATION_RATIO","particlesA","particlesB","particlesC","currentIteration","pathPoints","init","setup","setupProcess","draw","createCanvas","windowWidth","windowHeight","background","i","displayBackground","displaySphere","createCircularPathPoints","complexifyPath","stroke","length","vector1","vector2","line","noStroke","smooth","map","alpha","newPath","midPoint","distance","dist","deviation","newVector","randomGaussian","append","theta1","PI","theta2","createSketch","SideMenu","props","state","handleItemClick","e","data","setState","activeItem","name","preventDefault","Menu","pointing","secondary","vertical","className","color","Item","active","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","sketch","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAEaA,EAYX,WAAYC,GAAS,IAAD,gCAVHC,MAAgB,GAUb,KATHC,YAAsB,IASnB,KAPHC,aAOG,OANZC,OAMY,OALZC,OAKY,OAJZC,eAIY,OAHZC,cAGY,OAFZC,cAEY,OASbC,KAAO,WACZ,IAAMC,EAAQ,EAAKP,QAAQQ,MACzB,EAAKH,SAASJ,EAAI,EAAKF,YACvB,EAAKM,SAASH,EAAI,EAAKH,aACrB,EAAKC,QAAQS,OAAS,EAAKV,YAE/B,EAAKI,UAAUF,EAAI,EAAKD,QAAQU,IAAIH,GACpC,EAAKJ,UAAUD,EAAI,EAAKF,QAAQW,IAAIJ,GACpC,EAAKH,SAAW,EAAKD,UAAUS,OAC/B,EAAKR,SAASS,KAAK,EAAKf,OACxB,EAAKO,SAASS,IAAI,EAAKV,WAnBL,KAsBbW,UAAY,WACb,EAAKC,mBACP,EAAKX,SAASJ,EAAI,EAAKD,QAAQiB,OAAO,GAAI,EAAKjB,QAAQkB,OACvD,EAAKb,SAASH,EAAI,EAAKF,QAAQiB,OAAO,GAAI,EAAKjB,QAAQmB,UAzBvC,KA6BbC,QAAU,SAACC,GAAD,OAAoB,EAAKrB,QAAQsB,QAAQ,EAAKjB,SAASJ,EAAG,EAAKI,SAASH,EAAGmB,EAAQA,IA7BhF,KA+BZL,eAAiB,kBACvB,EAAKX,SAASJ,EAAI,EAAKD,QAAQkB,OAC/B,EAAKb,SAASH,EAAI,EAAKF,QAAQmB,QAC/B,EAAKd,SAASJ,EAAI,GAClB,EAAKI,SAASH,EAAI,GAlClBqB,KAAKvB,QAAUH,EACf0B,KAAKtB,EAAIJ,EAAEoB,OAAO,EAAGpB,EAAEqB,OACvBK,KAAKrB,EAAIL,EAAEoB,OAAO,EAAGpB,EAAEsB,QACvBI,KAAKpB,UAAYN,EAAE2B,aAAa,EAAG,GACnCD,KAAKnB,SAAWP,EAAE2B,aAAa,EAAG,GAClCD,KAAKlB,SAAWR,EAAE2B,aAAaD,KAAKtB,EAAGsB,KAAKrB,ICjB1CuB,EAaF,WAAY5B,GAAS,IAAD,gCAXH6B,iBAA2B,GAWxB,KAVHC,eAAyB,IAUtB,KATHC,yBAAmC,IAShC,KAPH5B,aAOG,OANZ6B,WAAyB,GAMb,KALZC,WAAyB,GAKb,KAJZC,WAAyB,GAIb,KAHZC,iBAA2B,EAGf,KAFZC,WAAuB,GAEX,KAIbC,KAAO,WACV,EAAKlC,QAAQmC,MAAQ,EAAKC,aAC1B,EAAKpC,QAAQqC,KAAO,EAAKA,MANT,KASZD,aAAe,WACnB,EAAKpC,QAAQsC,aAAa,EAAKtC,QAAQuC,YAAa,EAAKvC,QAAQwC,cACjE,EAAKxC,QAAQyC,WAAW,GAAI,EAAG,IAE/B,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKhB,iBAAkBgB,IACvC,EAAKb,WAAWa,GAAK,IAAI9C,EAAS,EAAKI,SACvC,EAAK8B,WAAWY,GAAK,IAAI9C,EAAS,EAAKI,SACvC,EAAK+B,WAAWW,GAAK,IAAI9C,EAAS,EAAKI,UAhB3B,KAoBZqC,KAAO,WACX,EAAKM,oBAED,EAAKX,iBAAmB,EAAKL,iBAC7B,EAAKiB,gBACL,EAAKZ,qBAzBO,KA6BZY,cAAgB,WAEpB,EAAKC,2BAEL,IAAK,IAAIH,EAAI,EAAGA,EAAI,EAAGA,IAAK,EAAKI,iBAGjC,EAAK9C,QAAQ+C,OAAO,IAAK,IAEzB,IAAK,IAAIL,EAAI,EAAGA,EAAI,EAAKT,WAAWe,OAAS,EAAGN,IAAK,CACjD,IAAMO,EAAU,EAAKhB,WAAWS,GAC1BQ,EAAU,EAAKjB,WAAWS,EAAI,GAEpC,EAAK1C,QAAQmD,KAAKF,EAAQhD,EAAGgD,EAAQ/C,EAAGgD,EAAQjD,EAAGiD,EAAQhD,KA1C/C,KA8CZyC,kBAAoB,WACxB,EAAK3C,QAAQoD,WACb,EAAKpD,QAAQqD,SAEb,IAAK,IAAIX,EAAI,EAAGA,EAAI,EAAKhB,iBAAkBgB,IAAK,CAC5C,IAAMrB,EAAS,EAAKrB,QAAQsD,IAAIZ,EAAG,EAAG,EAAKhB,iBAAkB,EAAG,GAC1D6B,EAAQ,EAAKvD,QAAQsD,IAAIZ,EAAG,EAAG,EAAKhB,iBAAkB,EAAG,KAE/D,EAAK1B,QAAQ+C,OAAO,GAAI,GAAI,IAAKQ,GACjC,EAAK1B,WAAWa,GAAGpC,OACnB,EAAKuB,WAAWa,GAAGtB,QAAQC,GAC3B,EAAKQ,WAAWa,GAAG3B,YAEnB,EAAKf,QAAQ+C,OAAO,EAAG,IAAK,IAAKQ,GACjC,EAAKzB,WAAWY,GAAGpC,OACnB,EAAKwB,WAAWY,GAAGtB,QAAQC,GAC3B,EAAKS,WAAWY,GAAG3B,YAEnB,EAAKf,QAAQ+C,OAAO,IAAK,IAAK,IAAKQ,GACnC,EAAKxB,WAAWW,GAAGpC,OACnB,EAAKyB,WAAWW,GAAGtB,QAAQC,GAC3B,EAAKU,WAAWW,GAAG3B,cAnEP,KAuEZ+B,eAAiB,WAIrB,IAFA,IAAMU,EAAoB,GAEjBd,EAAI,EAAGA,EAAI,EAAKT,WAAWe,OAAS,EAAGN,IAAK,CACjD,IAAMO,EAAU,EAAKhB,WAAWS,GAC1BQ,EAAU,EAAKjB,WAAWS,EAAI,GAE9Be,EAAW,EAAKzD,QAAQwB,eAAeV,IAAImC,EAASC,GAASrC,KAAK,GAClE6C,EAAWT,EAAQU,KAAKT,GAGxBU,EAAY,EAAKhC,yBAA2B8B,EAC5CG,EAAY,EAAK7D,QAAQwB,aAC7B,EAAKxB,QAAQ8D,eAAeL,EAASxD,EAAG2D,GACxC,EAAK5D,QAAQ8D,eAAeL,EAASvD,EAAG0D,IAG1C,EAAK5D,QAAQ+D,OAAOP,EAASP,GAC7B,EAAKjD,QAAQ+D,OAAOP,EAASK,GAIjC,EAAK7D,QAAQ+D,OAAOP,EAAS,EAAKvB,WAAW,EAAKA,WAAWe,OAAS,IAEtE,EAAKf,WAAauB,GAhGF,KAmGZX,yBAA2B,WAE/B,IAAMxB,EAAS,EAAKrB,QAAQmB,OAAS,EAC/B6C,EAAS,EAAKhE,QAAQ8D,eAAe,EAAG,EAAK9D,QAAQiE,GAAK,GAC1DC,EAAkB,EAATF,EAETf,EAAkB,EAAKjD,QAAQwB,aACnC,EAAKxB,QAAQkB,MAAQ,EAAIG,EAAS,EAAKrB,QAAQU,IAAIsD,GACnD,EAAKhE,QAAQmB,OAAS,EAAIE,EAAS,EAAKrB,QAAQW,IAAIqD,IAEhDd,EAAkB,EAAKlD,QAAQwB,aACnC,EAAKxB,QAAQkB,MAAQ,EAAIG,EAAS,EAAKrB,QAAQU,IAAIwD,GACnD,EAAKlE,QAAQmB,OAAS,EAAIE,EAAS,EAAKrB,QAAQW,IAAIuD,IAGtD,EAAKjC,WAAa,CAACgB,EAASC,IAjH5B3B,KAAKvB,QAAUH,GAqHVsE,EAAe,SAACtE,GAAD,OAAY,IAAI4B,EAAO5B,GAAGqC,Q,kDC7FvCkC,G,mBAlCX,WAAYC,GAAwB,IAAD,8BAC/B,4CAAMA,KAHHC,WAE4B,IAK5BC,gBAAkB,SAACC,EAAoDC,GAC1E,EAAKC,SAAS,CAAEC,WAAYF,EAAKG,OACjCJ,EAAEK,kBALF,EAAKP,MAAQ,CAACK,WAAY,QAFK,E,sEAUzB,IACEA,EAAepD,KAAK+C,MAApBK,WACR,OACI,kBAACG,EAAA,EAAD,CAAMC,UAAQ,EAACC,WAAS,EAACC,UAAQ,EAACC,UAAW,eAAgBC,MAAO,QAChE,kBAACL,EAAA,EAAKM,KAAN,CACIR,KAAK,OACLS,OAAuB,SAAfV,EACRW,QAAS/D,KAAKgD,kBAElB,kBAACO,EAAA,EAAKM,KAAN,CACIR,KAAK,SACLS,OAAuB,WAAfV,EACRW,QAAS/D,KAAKgD,kBAElB,kBAACO,EAAA,EAAKM,KAAN,CACIR,KAAK,YACLS,OAAuB,cAAfV,EACRW,QAAS/D,KAAKgD,uB,GA9BXgB,IAAMC,YCQTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBCCa,WAC3B,OACE,yBAAKb,UAAU,OACb,kBAAC,IAAD,CAAWc,OAAQ7B,IACnB,6CACA,kBAAC,EAAD,QDNU,MAAS8B,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC,iB","file":"static/js/main.ee5a2849.chunk.js","sourcesContent":["import { Vector } from 'p5'\n\nexport class Particle {\n\n  private readonly SPEED: number = 0.4\n  private readonly NOISE_SCALE: number = 800\n\n  private readonly process: any\n  private x: number\n  private y: number\n  private direction: Vector\n  private velocity: Vector\n  private position: Vector\n\n  constructor(p: any) {\n    this.process = p\n    this.x = p.random(0, p.width)\n    this.y = p.random(0, p.height)\n    this.direction = p.createVector(0, 0)\n    this.velocity = p.createVector(0, 0)\n    this.position = p.createVector(this.x, this.y)\n  }\n\n  public move = (): void => {\n    const angle = this.process.noise(\n      this.position.x / this.NOISE_SCALE,\n      this.position.y / this.NOISE_SCALE\n    ) * this.process.TWO_PI * this.NOISE_SCALE\n\n    this.direction.x = this.process.cos(angle)\n    this.direction.y = this.process.sin(angle)\n    this.velocity = this.direction.copy()\n    this.velocity.mult(this.SPEED)\n    this.position.add(this.velocity)\n  }\n\n  public checkEdge = (): void => {\n    if (this.isOutsideEdges()) {\n      this.position.x = this.process.random(50, this.process.width)\n      this.position.y = this.process.random(50, this.process.height)\n    }\n  }\n\n  public display = (radius: number) => this.process.ellipse(this.position.x, this.position.y, radius, radius)\n\n  private isOutsideEdges = (): boolean =>\n    this.position.x > this.process.width ||\n    this.position.y > this.process.height ||\n    this.position.x < 0 ||\n    this.position.y < 0\n}\n","import { Vector } from 'p5'\nimport { Particle } from './models/particle'\n\nclass Sketch {\n\n    private readonly PARTICLES_NUMBER: number = 50\n    private readonly MAX_ITERATIONS: number = 500\n    private readonly STANDARD_DEVIATION_RATIO: number = 0.25\n\n    private readonly process: any\n    private particlesA: Particle[] = []\n    private particlesB: Particle[] = []\n    private particlesC: Particle[] = []\n    private currentIteration: number = 0\n    private pathPoints: Vector[] = []\n\n    constructor(p: any) {\n        this.process = p\n    }\n\n    public init = () => {\n        this.process.setup = this.setupProcess\n        this.process.draw = this.draw\n    }\n\n    private setupProcess = (): void => {\n        this.process.createCanvas(this.process.windowWidth, this.process.windowHeight)\n        this.process.background(21, 8, 50)\n\n        for (let i = 0; i < this.PARTICLES_NUMBER; i++) {\n            this.particlesA[i] = new Particle(this.process)\n            this.particlesB[i] = new Particle(this.process)\n            this.particlesC[i] = new Particle(this.process)\n        }\n    }\n\n    private draw = (): void => {\n        this.displayBackground()\n\n        if (this.currentIteration < this.MAX_ITERATIONS) {\n            this.displaySphere()\n            this.currentIteration++\n        }\n    }\n\n    private displaySphere = (): void => {\n        // create the path\n        this.createCircularPathPoints()\n\n        for (let i = 0; i < 3; i++) this.complexifyPath()\n\n        // draw the path\n        this.process.stroke(255, 25)\n\n        for (let i = 0; i < this.pathPoints.length - 1; i++) {\n            const vector1 = this.pathPoints[i]\n            const vector2 = this.pathPoints[i + 1]\n\n            this.process.line(vector1.x, vector1.y, vector2.x, vector2.y)\n        }\n    }\n\n    private displayBackground = (): void => {\n        this.process.noStroke()\n        this.process.smooth()\n\n        for (let i = 0; i < this.PARTICLES_NUMBER; i++) {\n            const radius = this.process.map(i, 0, this.PARTICLES_NUMBER, 1, 2)\n            const alpha = this.process.map(i, 0, this.PARTICLES_NUMBER, 0, 250)\n\n            this.process.stroke(69, 33, 124, alpha)\n            this.particlesA[i].move()\n            this.particlesA[i].display(radius)\n            this.particlesA[i].checkEdge()\n\n            this.process.stroke(7, 153, 242, alpha)\n            this.particlesB[i].move()\n            this.particlesB[i].display(radius)\n            this.particlesB[i].checkEdge()\n\n            this.process.stroke(255, 255, 255, alpha)\n            this.particlesC[i].move()\n            this.particlesC[i].display(radius)\n            this.particlesC[i].checkEdge()\n        }\n    }\n\n    private complexifyPath = (): void => {\n        // create a new path array from the old one by adding new points inbetween the old points\n        const newPath: Vector[] = []\n\n        for (let i = 0; i < this.pathPoints.length - 1; i++) {\n            const vector1 = this.pathPoints[i]\n            const vector2 = this.pathPoints[i + 1]\n\n            const midPoint = this.process.createVector().add(vector1, vector2).mult(1)\n            const distance = vector1.dist(vector2)\n\n            // the new point is halfway between the old points, with some gaussian variation\n            const deviation = this.STANDARD_DEVIATION_RATIO * distance\n            const newVector = this.process.createVector(\n              this.process.randomGaussian(midPoint.x, deviation),\n              this.process.randomGaussian(midPoint.y, deviation)\n            )\n\n            this.process.append(newPath, vector1)\n            this.process.append(newPath, newVector)\n        }\n\n        // don't forget the last point!\n        this.process.append(newPath, this.pathPoints[this.pathPoints.length - 1])\n\n        this.pathPoints = newPath\n    }\n\n    private createCircularPathPoints = (): void => {\n        // two points somewhere on a circle\n        const radius = this.process.height / 2\n        const theta1 = this.process.randomGaussian(0, this.process.PI / 2) //  / 4)\n        const theta2 = theta1 * 2 // + this.process.randomGaussian(0, this.process.PI / 3)\n\n        const vector1: Vector = this.process.createVector(\n          this.process.width / 2 + radius * this.process.cos(theta1),\n          this.process.height / 2 + radius * this.process.sin(theta1)\n        )\n        const vector2: Vector = this.process.createVector(\n          this.process.width / 2 + radius * this.process.cos(theta2),\n          this.process.height / 2 + radius * this.process.sin(theta2)\n        )\n\n        this.pathPoints = [vector1, vector2]\n    }\n}\n\nexport const createSketch = (p: any) => new Sketch(p).init()\n","import React from 'react'\nimport {Menu, MenuItemProps} from 'semantic-ui-react'\nimport './SideMenu.css'\n\nclass SideMenu extends React.Component<ISideMenuProps, ISideMenuState> {\n    public state: ISideMenuState\n\n    constructor(props: ISideMenuProps) {\n        super(props)\n        this.state = {activeItem: 'home'}\n    }\n\n    public handleItemClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>, data: MenuItemProps): void => {\n        this.setState({ activeItem: data.name! })\n        e.preventDefault()\n    }\n\n    render() {\n        const { activeItem } = this.state\n        return (\n            <Menu pointing secondary vertical className={'website-menu'} color={'grey'}>\n                <Menu.Item\n                    name='home'\n                    active={activeItem === 'home'}\n                    onClick={this.handleItemClick}\n                />\n                <Menu.Item\n                    name='events'\n                    active={activeItem === 'events'}\n                    onClick={this.handleItemClick}\n                />\n                <Menu.Item\n                    name='follow us'\n                    active={activeItem === 'follow us'}\n                    onClick={this.handleItemClick}\n                />\n            </Menu>\n        )\n    }\n}\n\nexport default SideMenu\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker === null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\n// @ts-ignore\nimport P5Wrapper from 'react-p5-wrapper'\nimport { createSketch } from './sketches/sketch'\nimport './App.css'\nimport SideMenu from './components/SideMenu'\n\nexport const App: React.FC = () => {\n  return (\n    <div className='App'>\n      <P5Wrapper sketch={createSketch}/>\n      <h1>Hello, World!</h1>\n      <SideMenu/>\n    </div>\n  )\n}\n"],"sourceRoot":""}